{"version":3,"sources":["components/FormHead/index.jsx","components/TableTD/index.jsx","components/ButtonRemove/index.jsx","components/ButtonEdit/index.jsx","components/MainForm/index.jsx","App.js","serviceWorker.js","index.js"],"names":["FormHead","Component","TableTD","guest","this","props","surname","name","city","street","country","arrive","departure","days","notes","ButtonRemove","onButtonRemoveClick","onButtonRemove","style","backgroundColor","color","textShadow","onClick","ButtonEdit","onButtonEditClick","onButtonEdit","MainForm","state","id","searchGuests","searchNameGuests","searchCountryGuests","searchDateGuests","nonPolandNbr","fetchGuests","fetch","then","data","json","setState","onInputChange","e","target","value","nonPoland","filter","el","length","onButtonClick","preventDefault","Difference_In_Days","date1","Date","Difference_In_Time","getTime","Difference_In_DayString","String","addGuest","uniqid","method","headers","body","JSON","stringify","onButtonSearchClick","filteredGuests","filteredNameGuests","filteredCountryGuests","filteredDateGuests","date","onGuestDelete","URL_ADDRESS","onGuestEdit","className","onChange","type","placeholder","map","key","bind","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"mUA0BeA,E,iLArBP,OACI,oCACI,+BACK,4BACG,wCACA,yCACA,sCACA,qCACA,oCACA,8CACA,4CACA,mDACA,4C,GAdDC,aCoBRC,E,iLAjBF,IACEC,EAASC,KAAKC,MAAdF,MACP,OACI,oCACI,4BAAKA,EAAMG,SACX,4BAAKH,EAAMI,MACX,4BAAKJ,EAAMK,MACX,4BAAKL,EAAMM,QACX,4BAAKN,EAAMO,SACX,4BAAKP,EAAMQ,QACX,4BAAKR,EAAMS,WACX,4BAAKT,EAAMU,MACX,4BAAKV,EAAMW,Y,GAbLb,aCQPc,E,2MAVXC,oBAAsB,WAClB,EAAKX,MAAMY,kB,wEAIX,OAAO,wBAAIC,MAAO,CAACC,gBAAiB,MAAOC,MAAO,QAASC,WAAY,QAASC,QAASlB,KAAKY,qBAAvF,mB,GANYf,aCUZsB,E,2MATXC,kBAAoB,WAChB,EAAKnB,MAAMoB,gB,wEAGX,OAAO,wBAAIP,MAAO,CAACC,gBAAiB,MAAOC,MAAO,QAASC,WAAY,QAASC,QAASlB,KAAKoB,mBAAvF,gB,GALUvB,aCqOVyB,E,2MA5NXC,MAAQ,CACJxB,MAAQ,GACRyB,GAAI,GACJtB,QAAS,GACTC,KAAM,GACNG,QAAS,GACTF,KAAM,GACNC,OAAQ,GACRE,OAAQ,GACRC,UAAW,GACXC,KAAM,GACNC,MAAO,GACPe,aAAc,GACdC,iBAAkB,GAClBC,oBAAqB,GACrBC,iBAAkB,GAClBC,aAAc,I,EAMlBC,YAAc,WAEVC,MADoB,gCAEfC,MAAK,SAAAC,GAAI,OAAIA,EAAKC,UAClBF,MAAK,SAAAjC,GAAK,OAAI,EAAKoC,SAAS,CAAEpC,c,EAGvCqC,cAAgB,SAAAC,GACZ,EAAKF,SAAL,eACKE,EAAEC,OAAOnC,KAAOkC,EAAEC,OAAOC,QAE9B,IAAMC,EAAY,EAAKjB,MAAMxB,MAAM0C,QAAQ,SAAAC,GAAE,MAAmB,WAAfA,EAAGpC,WACpD,EAAK6B,SAAS,CACVN,aAAcW,EAAUG,U,EAIhCC,cAAgB,SAACP,GACbA,EAAEQ,iBACF,IAKIC,EALEC,EAAQ,IAAIC,KAAK,EAAKzB,MAAMhB,QAE5B0C,EADQ,IAAID,KAAK,EAAKzB,MAAMf,WACD0C,UAAYH,EAAMG,UAE7CC,EAAyBC,OADLH,EAAkB,OAGLH,EAAX,QAA5BK,EAA4D,EAA0BA,EACtF,IAAME,EAAW,CACb7B,GAAI8B,MACJpD,QAAS,EAAKqB,MAAMrB,QACpBC,KAAM,EAAKoB,MAAMpB,KACjBG,QAAS,EAAKiB,MAAMjB,QACpBF,KAAM,EAAKmB,MAAMnB,KACjBC,OAAQ,EAAKkB,MAAMlB,OACnBE,OAAQ,EAAKgB,MAAMhB,OACnBC,UAAW,EAAKe,MAAMf,UACtBC,KAAMqC,EACNpC,MAAO,EAAKa,MAAMb,OAEtB,EAAKyB,SAAU,CACXpC,MAAM,GAAD,mBAAM,EAAKwB,MAAMxB,OAAjB,CAAwBsD,IAC7B7B,GAAI,GACJtB,QAAS,GACTC,KAAM,GACNG,QAAS,GACTF,KAAM,GACNC,OAAQ,GACRE,OAAQ,GACRC,UAAW,GACXC,KAAK,GACLC,MAAO,KAGXqB,MADiB,+BACE,CACfwB,OAAQ,OACJC,QAAS,CACL,eAAgB,mCAExBC,KAAMC,KAAKC,UAAUN,KAEpBrB,MAAK,kBAAM,EAAKF,kB,EAEzB8B,oBAAsB,SAACvB,GACnBA,EAAEQ,iBACF,IAAMgB,EAAiB,EAAKtC,MAAMxB,MAAM0C,QAAQ,SAAAC,GAAE,OAAIA,EAAGxC,UAAY,EAAKqB,MAAMrB,WAChF,EAAKiC,SAAS,CACVV,aAAeoC,EACf3D,QAAS,KAEb,IAAM4D,EAAqB,EAAKvC,MAAMxB,MAAM0C,QAAQ,SAAAC,GAAE,OAAGA,EAAGvC,OAAS,EAAKoB,MAAMpB,QAChF,EAAKgC,SAAS,CACVT,iBAAmBoC,EACnB3D,KAAM,KAEV,IAAM4D,EAAwB,EAAKxC,MAAMxB,MAAM0C,QAAQ,SAAAC,GAAE,OAAGA,EAAGpC,UAAY,EAAKiB,MAAMjB,WACtF,EAAK6B,SAAS,CACVR,oBAAsBoC,EACtBzD,QAAS,KAEb,IAAM0D,EAAqB,EAAKzC,MAAMxB,MAAM0C,QAAQ,SAAAC,GAAE,OAAGA,EAAGnC,SAAW,EAAKgB,MAAMhB,UAClF,EAAK4B,SAAS,CACVP,iBAAmBoC,EACnBC,KAAM,M,EAGdC,cAAgB,SAAA1C,GACZ,IAAM2C,EAAW,uCAAmC3C,GACpDO,MAAMoC,EAAa,CAAEZ,OAAQ,WACxBvB,MAAK,kBAAM,EAAKF,iBACrB,EAAKK,SAAS,CACVV,aAAe,GACfC,iBAAmB,GACnBC,oBAAqB,GACrBC,iBAAkB,M,EAG1BwC,YAAc,SAAA5C,GACV,IAAM2C,EAAW,uCAAmC3C,GACpDO,MAAMoC,GACDnC,MAAK,SAAAC,GAAI,OAAIA,EAAKC,UAClBF,MAAK,SAAAC,GAAI,OAAI,EAAKE,SAAS,CACxBjC,QAAS+B,EAAK/B,QACdC,KAAM8B,EAAK9B,KACXG,QAAS2B,EAAK3B,QACdF,KAAM6B,EAAK7B,KACXC,OAAQ4B,EAAK5B,OACbE,OAAQ0B,EAAK1B,OACbC,UAAWyB,EAAKzB,UAChBE,MAAOuB,EAAKvB,WACZsB,MAAK,kBAAM,EAAKkC,cAAc1C,O,mFA/GtCxB,KAAK8B,gB,+BAkHC,IAAD,SACkJ9B,KAAKuB,MAArJrB,EADF,EACEA,QAASC,EADX,EACWA,KAAMG,EADjB,EACiBA,QAASF,EAD1B,EAC0BA,KAAMC,EADhC,EACgCA,OAAQE,EADxC,EACwCA,OAAQC,EADhD,EACgDA,UAAWT,EAD3D,EAC2DA,MAAOW,EADlE,EACkEA,MAAOe,EADzE,EACyEA,aAAcC,EADvF,EACuFA,iBAAkBC,EADzG,EACyGA,oBAAqBC,EAD9H,EAC8HA,iBACnI,OACI,oCACA,yBAAKyC,UAAU,aACX,yBAAKA,UAAU,SAEf,wDACA,oEAA2BtE,EAAM4C,QACjC,+BAAgC,IAA3B3C,KAAKuB,MAAMM,aAAX,6DAAsE7B,KAAKuB,MAAMM,cAAgB,MACtG,0BAAOwC,UAAU,QACb,2BAAOC,SAAUtE,KAAKoC,cAAemC,KAAK,OAAOpE,KAAK,UAAUoC,MAAOrC,EAASsE,YAAY,aAC5F,2BAAOF,SAAUtE,KAAKoC,cAAemC,KAAK,OAAOpE,KAAK,OAAOoC,MAAOpC,EAAMqE,YAAY,cACtF,2BAAOF,SAAUtE,KAAKoC,cAAemC,KAAK,OAAOpE,KAAK,UAAUoC,MAAOjC,EAASkE,YAAY,qBAC5F,2BAAOF,SAAUtE,KAAKoC,cAAemC,KAAK,OAAOpE,KAAK,OAAOoC,MAAOnC,EAAMoE,YAAY,WACtF,2BAAOF,SAAUtE,KAAKoC,cAAemC,KAAK,OAAOpE,KAAK,SAASoC,MAAOlC,EAAQmE,YAAY,UAC1F,2BAAOF,SAAUtE,KAAKoC,cAAemC,KAAK,OAAOpE,KAAK,SAASoC,MAAOhC,EAAQiE,YAAY,sBAC1F,2BAAOF,SAAUtE,KAAKoC,cAAemC,KAAK,OAAOpE,KAAK,YAAYoC,MAAO/B,EAAWgE,YAAY,oBAChG,2BAAOF,SAAUtE,KAAKoC,cAAemC,KAAK,WAAWpE,KAAK,QAAQoC,MAAO7B,EAAO8D,YAAY,WAGhG,yBAAKH,UAAU,WACX,4BAASnD,QAASlB,KAAK4D,oBAAqBS,UAAU,aAAalE,KAAK,UAAxE,YACC,4BAAQe,QAASlB,KAAK4C,cAAeyB,UAAU,UAAUlE,KAAK,SAA9D,YAGL,2BAAOkE,UAAU,aACb,+BACC1C,EAAoB8C,KAAI,SAAA9C,GAAmB,OACxC,wBAAI+C,IAAK/C,EAAoBH,IACzB,kBAAC,EAAD,CAASzB,MAAO4B,IAChB,kBAAC,EAAD,CAAYN,aAAc,EAAK+C,YAAYO,KAAK,EAAMhD,EAAoBH,MAC1E,kBAAC,EAAD,CAAcX,eAAgB,EAAKqD,cAAcS,KAAK,EAAMhD,EAAoBH,YAK5F,2BAAO6C,UAAU,aACb,+BACCzC,EAAiB6C,KAAI,SAAA7C,GAAgB,OAClC,wBAAI8C,IAAK9C,EAAiBJ,IACtB,kBAAC,EAAD,CAASzB,MAAO6B,IAChB,kBAAC,EAAD,CAAYP,aAAc,EAAK+C,YAAYO,KAAK,EAAM/C,EAAiBJ,MACvE,kBAAC,EAAD,CAAcX,eAAgB,EAAKqD,cAAcS,KAAK,EAAM/C,EAAiBJ,YAKzF,2BAAO6C,UAAU,aACb,+BACC3C,EAAiB+C,KAAI,SAAA/C,GAAgB,OAClC,wBAAIgD,IAAKhD,EAAiBF,IACtB,kBAAC,EAAD,CAASzB,MAAO2B,IAChB,kBAAC,EAAD,CAAYL,aAAc,EAAK+C,YAAYO,KAAK,EAAMjD,EAAiBF,MACvE,kBAAC,EAAD,CAAcX,eAAgB,EAAKqD,cAAcS,KAAK,EAAMjD,EAAiBF,YAKrF,2BAAO6C,UAAU,aACb,+BACC5C,EAAagD,KAAI,SAAAhD,GAAY,OAC1B,wBAAIiD,IAAKjD,EAAaD,IAClB,kBAAC,EAAD,CAASzB,MAAO0B,IAChB,kBAAC,EAAD,CAAYJ,aAAc,EAAK+C,YAAYO,KAAK,EAAMlD,EAAaD,MACnE,kBAAC,EAAD,CAAcX,eAAgB,EAAKqD,cAAcS,KAAK,EAAMlD,EAAaD,YAKzF,2BAAO6C,UAAU,aACd,kBAAC,EAAD,MACC,+BACCtE,EAAM0E,KAAI,SAAA1E,GAAK,OACZ,wBAAI2E,IAAK3E,EAAMyB,IACZ,kBAAC,EAAD,CAASzB,MAAOA,IACf,kBAAC,EAAD,CAAYsB,aAAc,EAAK+C,YAAYO,KAAK,EAAM5E,EAAMyB,MAC5D,kBAAC,EAAD,CAAcX,eAAgB,EAAKqD,cAAcS,KAAK,EAAM5E,EAAMyB,iB,GAnNvE3B,aCFR+E,MAJf,WACE,OAAO,kBAAC,EAAD,OCOWC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMxD,MAAK,SAAAyD,GACjCA,EAAaC,kB","file":"static/js/main.8b27083a.chunk.js","sourcesContent":["import React, {Component} from \"react\";\n\n\nclass FormHead extends Component {\n    render () {\n        return (\n            <>\n                <thead>\n                     <tr>\n                        <th>Nazwisko</th>\n                        <th>Imię</th>\n                        <th>Miasto</th>\n                        <th>Ulica</th>\n                        <th>Kraj</th>\n                        <th>Data przyjazdu</th>\n                        <th>Data wyjazdu</th>\n                        <th>Ilość dni</th>\n                        <th>Uwagi</th>\n                     </tr>\n                </thead>\n                </>\n        )\n    }\n\n}\n\nexport default FormHead\n\n\n\n","import React, {Component} from \"react\";\n\n\n\n\nclass TableTD extends Component {\n    render(){\n        const {guest} = this.props;\n        return(\n            <>\n                <td>{guest.surname}</td>\n                <td>{guest.name}</td>\n                <td>{guest.city}</td>\n                <td>{guest.street}</td>\n                <td>{guest.country}</td>\n                <td>{guest.arrive}</td>\n                <td>{guest.departure}</td>\n                <td>{guest.days}</td>\n                <td>{guest.notes}</td>\n                </>\n        )\n    }\n}\nexport default TableTD","import React ,{Component} from \"react\";\n\nclass ButtonRemove extends Component {\n    onButtonRemoveClick = () => {\n        this.props.onButtonRemove();\n    };\n    render() {\n\n        return <td style={{backgroundColor: 'red', color: 'white', textShadow: 'none'}} onClick={this.onButtonRemoveClick}> Usuń </td>\n    }\n}\n\n\nexport default ButtonRemove","import React ,{Component} from \"react\";\n\nclass ButtonEdit extends Component {\n    onButtonEditClick = () => {\n        this.props.onButtonEdit();\n    };\n    render() {\n        return <td style={{backgroundColor: 'red', color: 'white', textShadow: 'none'}} onClick={this.onButtonEditClick}> Edytuj </td>\n    }\n}\n\n\nexport default ButtonEdit","import React, {Component} from \"react\";\nimport \"./style.scss\";\nimport uniqid from 'uniqid';\nimport FormHead from \"../FormHead\";\n// import InnerMainForm from \"../InnerMainForm\";\nimport TableTD from \"../TableTD\";\nimport ButtonRemove from \"../ButtonRemove\";\nimport ButtonEdit from \"../ButtonEdit\";\n\n\nclass MainForm extends Component  {\n    state = {\n        guest : [],\n        id: '',\n        surname: '',\n        name: '',\n        country: '',\n        city: '',\n        street: '',\n        arrive: '',\n        departure: '',\n        days: '',\n        notes: '',\n        searchGuests: [],\n        searchNameGuests: [],\n        searchCountryGuests: [],\n        searchDateGuests: [],\n        nonPolandNbr: ''\n    };\n    componentDidMount() {\n        this.fetchGuests();\n    }\n\n    fetchGuests = () => {\n        const URL_ADDRESS = 'http://localhost:3000/guests';\n        fetch(URL_ADDRESS)\n            .then(data => data.json())\n            .then(guest => this.setState({ guest }))\n    };\n\n    onInputChange = e => {\n        this.setState({\n           [ e.target.name]: e.target.value\n        });\n        const nonPoland = this.state.guest.filter( el => el.country !== 'Polska');\n        this.setState({\n            nonPolandNbr: nonPoland.length\n        })\n    };\n\n    onButtonClick = (e)=> {\n        e.preventDefault();\n        const date1 = new Date(this.state.arrive);\n        const date2 = new Date(this.state.departure);\n        const Difference_In_Time = date2.getTime() - date1.getTime();\n        const Difference_In_Day = Difference_In_Time / (1000 * 3600 * 24);\n        const Difference_In_DayString= String(Difference_In_Day);\n        let Difference_In_Days ;\n        Difference_In_DayString === 'NaN' ?  ( Difference_In_Days = 0 ) : Difference_In_Days =Difference_In_DayString ;\n        const addGuest = {\n            id: uniqid(),\n            surname: this.state.surname,\n            name: this.state.name,\n            country: this.state.country,\n            city: this.state.city,\n            street: this.state.street,\n            arrive: this.state.arrive,\n            departure: this.state.departure,\n            days: Difference_In_Days,\n            notes: this.state.notes\n        };\n        this.setState( {\n            guest: [...this.state.guest, addGuest],\n            id: '',\n            surname: '',\n            name: '',\n            country: '',\n            city: '',\n            street: '',\n            arrive: '',\n            departure: '',\n            days:'',\n            notes: ''\n        });\n        const URL_ADDRESS = `http://localhost:3000/guests`;\n        fetch(URL_ADDRESS, {\n            method: 'POST',\n                headers: {\n                    'Content-type': 'application/json; charset=UTF-8'\n                },\n            body: JSON.stringify(addGuest)\n    })\n            .then(() => this.fetchGuests());\n    };\n    onButtonSearchClick = (e) => {\n        e.preventDefault();\n        const filteredGuests = this.state.guest.filter( el => el.surname === this.state.surname);\n        this.setState({\n            searchGuests : filteredGuests,\n            surname: ''\n        });\n        const filteredNameGuests = this.state.guest.filter( el=> el.name === this.state.name);\n        this.setState({\n            searchNameGuests : filteredNameGuests,\n            name: ''\n        });\n        const filteredCountryGuests = this.state.guest.filter( el=> el.country === this.state.country);\n        this.setState({\n            searchCountryGuests : filteredCountryGuests,\n            country: ''\n        });\n        const filteredDateGuests = this.state.guest.filter( el=> el.arrive === this.state.arrive);\n        this.setState({\n            searchDateGuests : filteredDateGuests,\n            date: ''\n        });\n    };\n    onGuestDelete = id => {\n        const URL_ADDRESS = `http://localhost:3000/guests/${id}`;\n        fetch(URL_ADDRESS, { method: 'delete' })\n            .then(() => this.fetchGuests());\n        this.setState({\n            searchGuests : [],\n            searchNameGuests : [],\n            searchCountryGuests: [],\n            searchDateGuests: []\n        })\n    };\n    onGuestEdit = id => {\n        const URL_ADDRESS = `http://localhost:3000/guests/${id}`;\n        fetch(URL_ADDRESS)\n            .then(data => data.json())\n            .then(data => this.setState({\n                surname: data.surname,\n                name: data.name,\n                country: data.country,\n                city: data.city,\n                street: data.street,\n                arrive: data.arrive,\n                departure: data.departure,\n                notes: data.notes\n            })).then(() => this.onGuestDelete(id));\n    };\n\n    render() {\n        const {surname, name, country, city, street, arrive, departure, guest, notes ,searchGuests, searchNameGuests, searchCountryGuests, searchDateGuests} = this.state;\n        return (\n            <>\n            <div className=\"container\">\n                <div className=\"logo\">\n                </div>\n                <h1> Rejestracja Gości </h1>\n                <p> Ilość gości w bazie : {guest.length}</p>\n                <p> {this.state.nonPolandNbr !==0 ? `Ilość zagranicznych gości w bazie : ${this.state.nonPolandNbr}`: null}</p>\n                <form  className=\"form\">\n                    <input onChange={this.onInputChange} type=\"text\" name=\"surname\" value={surname} placeholder=\"Nazwisko\"/>\n                    <input onChange={this.onInputChange} type=\"text\" name=\"name\" value={name} placeholder=\"Imię\"/>\n                    <input onChange={this.onInputChange} type=\"text\" name=\"country\" value={country} placeholder=\"Kraj pochodzenia\"/>\n                    <input onChange={this.onInputChange} type=\"text\" name=\"city\" value={city} placeholder=\"Miasto\"/>\n                    <input onChange={this.onInputChange} type=\"text\" name=\"street\" value={street} placeholder=\"Ulica\"/>\n                    <input onChange={this.onInputChange} type=\"date\" name=\"arrive\" value={arrive} placeholder=\"Data przyjazdu : \"/>\n                    <input onChange={this.onInputChange} type=\"date\" name=\"departure\" value={departure} placeholder=\"Data wyjazdu : \"/>\n                    <input onChange={this.onInputChange} type=\"textarea\" name=\"notes\" value={notes} placeholder=\"Uwagi\"/>\n                </form>\n                {/*<InnerMainForm  onChange={this.onInputChange} surname={surname} name={name} country={country} city={city} street={street} arrive={arrive} departure={departure} notes={notes}/>*/}\n                <div className=\"buttons\">\n                    <button  onClick={this.onButtonSearchClick} className='btn search' name=\"szukaj\"> Szukaj </button>\n                     <button onClick={this.onButtonClick} className='btn add' name=\"dodaj\"> Dodaj</button>\n                </div>\n            </div>\n                <table className=\"zui-table\">\n                    <tbody>\n                    {searchCountryGuests.map(searchCountryGuests => (\n                        <tr key={searchCountryGuests.id}>\n                            <TableTD guest={searchCountryGuests}/>\n                            <ButtonEdit onButtonEdit={this.onGuestEdit.bind(this, searchCountryGuests.id)}/>\n                            <ButtonRemove onButtonRemove={this.onGuestDelete.bind(this, searchCountryGuests.id)}/>\n                        </tr>\n                    ))}\n                    </tbody>\n                </table>\n                <table className=\"zui-table\">\n                    <tbody>\n                    {searchDateGuests.map(searchDateGuests => (\n                        <tr key={searchDateGuests.id}>\n                            <TableTD guest={searchDateGuests}/>\n                            <ButtonEdit onButtonEdit={this.onGuestEdit.bind(this, searchDateGuests.id)}/>\n                            <ButtonRemove onButtonRemove={this.onGuestDelete.bind(this, searchDateGuests.id)}/>\n                        </tr>\n                    ))}\n                    </tbody>\n                </table>\n                <table className=\"zui-table\">\n                    <tbody>\n                    {searchNameGuests.map(searchNameGuests => (\n                        <tr key={searchNameGuests.id}>\n                            <TableTD guest={searchNameGuests}/>\n                            <ButtonEdit onButtonEdit={this.onGuestEdit.bind(this, searchNameGuests.id)}/>\n                            <ButtonRemove onButtonRemove={this.onGuestDelete.bind(this, searchNameGuests.id)}/>\n                        </tr>\n                    ))}\n                    </tbody>\n                </table>\n                    <table className=\"zui-table\">\n                        <tbody>\n                        {searchGuests.map(searchGuests => (\n                            <tr key={searchGuests.id}>\n                                <TableTD guest={searchGuests} />\n                                <ButtonEdit onButtonEdit={this.onGuestEdit.bind(this, searchGuests.id)}/>\n                                <ButtonRemove onButtonRemove={this.onGuestDelete.bind(this, searchGuests.id)}/>\n                            </tr>\n                        ))}\n                        </tbody>\n                    </table>\n                <table className=\"zui-table\">\n                   <FormHead />\n                    <tbody>\n                    {guest.map(guest => (\n                        <tr key={guest.id}>\n                           <TableTD guest={guest} />\n                            <ButtonEdit onButtonEdit={this.onGuestEdit.bind(this, guest.id)}/>\n                            <ButtonRemove onButtonRemove={this.onGuestDelete.bind(this, guest.id)}/>\n                        </tr>\n                    ))}\n                    </tbody>\n                </table>\n                </>\n        )\n    }\n}\n\nexport default MainForm;\n","import React from 'react';\nimport './App.css';\nimport MainForm from \"./components/MainForm\";\n\nfunction App() {\n  return <MainForm />;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}